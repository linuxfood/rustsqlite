#[link(
  name = "sqlite",
  vers = "0.1",
  uuid = "5dd017c1-a8fb-458f-b430-cecf793ffbd5"
)];
#[crate_type = "lib"];

/*
** Copyright (c) 2011, Brian Smith <brian@linuxfood.net>
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**
**   * Redistributions of source code must retain the above copyright notice,
**     this list of conditions and the following disclaimer.
**
**   * Redistributions in binary form must reproduce the above copyright notice,
**     this list of conditions and the following disclaimer in the documentation
**     and/or other materials provided with the distribution.
**
**   * Neither the name of Brian Smith nor the names of its contributors
**     may be used to endorse or promote products derived from this software
**     without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
*/
#[forbid(deprecated_pattern)];
#[forbid(deprecated_mode)];

extern mod std;
use core::libc::*;
use core::hashmap::linear::LinearMap;

#[deriving_eq]
pub enum ResultCode {
  SQLITE_OK         =  0,
  SQLITE_ERROR      =  1,
  SQLITE_INTERNAL   =  2,
  SQLITE_PERM       =  3,
  SQLITE_ABORT      =  4,
  SQLITE_BUSY       =  5,
  SQLITE_LOCKED     =  6,
  SQLITE_NOMEM      =  7,
  SQLITE_READONLY   =  8,
  SQLITE_INTERRUPT  =  9,
  SQLITE_IOERR      = 10,
  SQLITE_CORRUPT    = 11,
  SQLITE_NOTFOUND   = 12,
  SQLITE_FULL       = 13,
  SQLITE_CANTOPEN   = 14,
  SQLITE_PROTOCOL   = 15,
  SQLITE_EMPTY      = 16,
  SQLITE_SCHEMA     = 17,
  SQLITE_TOOBIG     = 18,
  SQLITE_CONSTRAINT = 19,
  SQLITE_MISMATCH   = 20,
  SQLITE_MISUSE     = 21,
  SQLITE_NOLFS      = 22,
  SQLITE_AUTH       = 23,
  SQLITE_FORMAT     = 24,
  SQLITE_RANGE      = 25,
  SQLITE_NOTADB     = 26,
  SQLITE_ROW        = 100,
  SQLITE_DONE       = 101,
}

impl ResultCode: to_str::ToStr {
  pure fn to_str(&self) -> ~str {
    match *self {
      SQLITE_OK => ~"Ok",
      SQLITE_ERROR => ~"SQLITE_ERROR",
      SQLITE_INTERNAL => ~"SQLITE_INTERNAL",
      SQLITE_PERM => ~"SQLITE_PERM",
      SQLITE_ABORT => ~"SQLITE_ABORT",
      SQLITE_BUSY => ~"SQLITE_BUSY",
      SQLITE_LOCKED => ~"SQLITE_LOCKED",
      SQLITE_NOMEM => ~"SQLITE_NOMEM",
      SQLITE_READONLY => ~"SQLITE_READONLY",
      SQLITE_INTERRUPT => ~"SQLITE_INTERRUPT",
      SQLITE_IOERR => ~"SQLITE_IOERR",
      SQLITE_CORRUPT => ~"SQLITE_CORRUPT",
      SQLITE_NOTFOUND => ~"SQLITE_NOTFOUND",
      SQLITE_FULL => ~"SQLITE_FULL",
      SQLITE_CANTOPEN => ~"SQLITE_CANTOPEN",
      SQLITE_PROTOCOL => ~"SQLITE_PROTOCOL",
      SQLITE_EMPTY => ~"SQLITE_EMPTY",
      SQLITE_SCHEMA => ~"SQLITE_SCHEMA",
      SQLITE_TOOBIG => ~"SQLITE_TOOBIG",
      SQLITE_CONSTRAINT => ~"SQLITE_CONSTRAINT",
      SQLITE_MISMATCH => ~"SQLITE_MISMATCH",
      SQLITE_MISUSE => ~"SQLITE_MISUSE",
      SQLITE_NOLFS => ~"SQLITE_NOLFS",
      SQLITE_AUTH => ~"SQLITE_AUTH",
      SQLITE_FORMAT => ~"SQLITE_FORMAT",
      SQLITE_RANGE => ~"SQLITE_RANGE",
      SQLITE_NOTADB => ~"SQLITE_NOTADB",
      SQLITE_ROW => ~"SQLITE_ROW",
      SQLITE_DONE => ~"SQLITE_DONE",
    }
  }
}

#[deriving_eq]
pub enum BindArg {
  Text(~str),
  Number(float),
  Integer(int),
  Blob(~[u8]),
  Null,
}

pub enum ColumnType {
  SQLITE_INTEGER,
  SQLITE_FLOAT,
  SQLITE_TEXT,
  SQLITE_BLOB,
  SQLITE_NULL,
}

pub type SqliteResult<T> = Result<T, ResultCode>;

type RowMap = LinearMap<~str, BindArg>;

pub struct Database {
  priv dbh: *dbh,

  drop {
    debug!("freeing dbh resource: %?", self.dbh);
    unsafe {
      sqlite3::sqlite3_close(self.dbh);
    }
  }
}

impl Database {
  unsafe fn get_errmsg(&self) -> ~str {
    str::raw::from_c_str(sqlite3::sqlite3_errmsg(self.dbh))
  }

  fn prepare(&self, sql: &str, _tail: &Option<&str>) -> SqliteResult<Cursor> {
    let new_stmt = ptr::null();
    let mut r = str::as_c_str(sql, |_sql| {
      unsafe {
        sqlite3::sqlite3_prepare_v2(self.dbh, _sql, str::len(sql) as c_int, ptr::addr_of(&new_stmt), ptr::null())
      }
    });
    if r == SQLITE_OK {
      debug!("created new stmt: %?", new_stmt);
      Ok(Cursor { stmt: new_stmt })
    } else {
      Err(r)
    }
  }
  fn exec(&self, sql: &str) -> SqliteResult<ResultCode> {
    let mut r = SQLITE_ERROR;
    str::as_c_str(sql, |_sql| {
      unsafe {
        r = sqlite3::sqlite3_exec(self.dbh, _sql, ptr::null(), ptr::null(), ptr::null())
      }
    });

    if r == SQLITE_OK { Ok(r) } else { Err(r) }
  }
  fn get_changes(&self) -> int {
    unsafe {
      sqlite3::sqlite3_changes(self.dbh) as int
    }
  }
  fn get_last_insert_rowid(&self) -> i64 {
    unsafe {
      sqlite3::sqlite3_last_insert_rowid(self.dbh)
    }
  }

  fn set_busy_timeout(&self, ms: int) -> ResultCode {
    unsafe {
      sqlite3::sqlite3_busy_timeout(self.dbh, ms as c_int)
    }
  }
}

enum dbh {}
enum stmt {}

enum _notused {}

extern mod sqlite3 {
  fn sqlite3_open(path: *c_char, hnd: **dbh) -> ResultCode;
  fn sqlite3_close(dbh: *dbh) -> ResultCode;
  fn sqlite3_errmsg(dbh: *dbh) -> *c_char;
  fn sqlite3_changes(dbh: *dbh) -> c_int;
  fn sqlite3_last_insert_rowid(dbh: *dbh) -> i64;
  fn sqlite3_complete(sql: *c_char) -> c_int;

  fn sqlite3_prepare_v2(
    hnd: *dbh,
    sql: *c_char,
    sql_len: c_int,
    shnd: **stmt,
    tail: **c_char
  ) -> ResultCode;

  fn sqlite3_exec(dbh: *dbh, sql: *c_char, cb: *_notused, d: *_notused, err: **c_char) -> ResultCode;

  fn sqlite3_step(sth: *stmt) -> ResultCode;
  fn sqlite3_reset(sth: *stmt) -> ResultCode;
  fn sqlite3_finalize(sth: *stmt) -> ResultCode;
  fn sqlite3_clear_bindings(sth: *stmt) -> ResultCode;

  fn sqlite3_column_name(sth: *stmt, icol: c_int) -> *c_char;
  fn sqlite3_column_type(sth: *stmt, icol: c_int) -> c_int;
  fn sqlite3_data_count(sth: *stmt) -> c_int;
  fn sqlite3_column_bytes(sth: *stmt, icol: c_int) -> c_int;
  fn sqlite3_column_blob(sth: *stmt, icol: c_int) -> *u8;

  fn sqlite3_column_text(sth: *stmt, icol: c_int) -> *c_char;
  fn sqlite3_column_double(sth: *stmt, icol: c_int) -> float;
  fn sqlite3_column_int(sth: *stmt, icol: c_int) -> c_int;

  fn sqlite3_bind_blob(sth: *stmt, icol: c_int, buf: *u8, buflen: c_int, d: c_int) -> ResultCode;
  fn sqlite3_bind_text(sth: *stmt, icol: c_int, buf: *c_char, buflen: c_int, d: c_int) -> ResultCode;
  fn sqlite3_bind_null(sth: *stmt, icol: c_int) -> ResultCode;
  fn sqlite3_bind_int(sth: *stmt, icol: c_int, v: c_int) -> ResultCode;
  fn sqlite3_bind_double(sth: *stmt, icol: c_int, value: float) -> ResultCode;
  fn sqlite3_bind_parameter_index(sth: *stmt, name: *c_char) -> c_int;

  fn sqlite3_busy_timeout(dbh: *dbh, ms: c_int) -> ResultCode;

}

struct Cursor {
  priv stmt: *stmt,

  drop {
    log(debug, (~"freeing stmt resource: ", self.stmt));
    unsafe {
      sqlite3::sqlite3_finalize(self.stmt);
    }
  }
}

fn sqlite_complete(sql: &str) -> SqliteResult<bool> {
  let r = str::as_c_str(sql, { |_sql|
    unsafe {
      sqlite3::sqlite3_complete(_sql)
    }
  }) as int;
  if r == SQLITE_NOMEM as int {
    return Err(SQLITE_NOMEM);
  }
  else if r == 1 {
    return Ok(true);
  }
  else {
    return Ok(false);
  }
}

impl Cursor {
  fn reset(&self) -> ResultCode {
    unsafe {
      sqlite3::sqlite3_reset(self.stmt)
    }
  }

  fn clear_bindings(&self) -> ResultCode {
    unsafe {
      sqlite3::sqlite3_clear_bindings(self.stmt)
    }
  }

  fn step(&self) -> ResultCode {
    unsafe {
      sqlite3::sqlite3_step(self.stmt)
    }
  }

  fn step_row(&self) -> SqliteResult<Option<RowMap>> {
    let is_row: ResultCode = self.step();
    if is_row == SQLITE_ROW {
      let column_cnt = self.get_column_count();
      let mut i = 0;
      let mut sqlrow = LinearMap::new();
      while( i < column_cnt ) {
        let name = self.get_column_name(i);
        let coltype = self.get_column_type(i);
        let res = match coltype {
          SQLITE_INTEGER => sqlrow.insert(name, Integer(self.get_int(i))),
          SQLITE_FLOAT   => sqlrow.insert(name, Number(self.get_num(i))),
          SQLITE_TEXT    => sqlrow.insert(name, Text(self.get_text(i))),
          SQLITE_BLOB    => sqlrow.insert(name, Blob(self.get_blob(i))),
          SQLITE_NULL    => sqlrow.insert(name, Null),
        };
        if res == false {
          die!(~"Couldn't insert a value into the map for sqlrow!");
        }
        i += 1;
      }

      Ok(Some(sqlrow))
    }
    else if is_row == SQLITE_DONE {
      Ok(None)
    } else {
      Err(is_row)
    }
  }

  fn get_bytes(&self, i: int) -> int {
    unsafe {
      sqlite3::sqlite3_column_bytes(self.stmt, i as c_int) as int
    }
  }

  unsafe fn get_blob(&self, i: int) -> ~[u8] {
    let len  = self.get_bytes(i);
    let mut bytes = vec::raw::from_buf_raw(
      sqlite3::sqlite3_column_blob(self.stmt, i as c_int),
      len as uint
    );
    return bytes;
  }

  fn get_int(&self, i: int) -> int {
    unsafe {
      return sqlite3::sqlite3_column_int(self.stmt, i as c_int) as int;
    }
  }

  fn get_num(&self, i: int) -> float {
    unsafe {
      return sqlite3::sqlite3_column_double(self.stmt, i as c_int);
    }
  }

  unsafe fn get_text(&self, i: int) -> ~str {
    return str::raw::from_c_str( sqlite3::sqlite3_column_text(self.stmt, i as c_int) );
  }

  fn get_bind_index(&self, name: &str) -> int {
    let stmt = self.stmt;
    do str::as_c_str(name) |namebuf| {
      unsafe {
        sqlite3::sqlite3_bind_parameter_index(stmt, namebuf) as int
      }
    }
  }

  fn get_column_count(&self) -> int {
    unsafe {
      return sqlite3::sqlite3_data_count(self.stmt) as int;
    }
  }

  unsafe fn get_column_name(&self, i: int) -> ~str {
    return str::raw::from_c_str( sqlite3::sqlite3_column_name(self.stmt, i as c_int) );
  }

  fn get_column_type(&self, i: int) -> ColumnType {
    let ct;
    unsafe {
      ct = sqlite3::sqlite3_column_type(self.stmt, i as c_int) as int;
    }
    let mut res = match ct {
      1 /* SQLITE_INTEGER */ => SQLITE_INTEGER,
      2 /* SQLITE_FLOAT   */ => SQLITE_FLOAT,
      3 /* SQLITE_TEXT    */ => SQLITE_TEXT,
      4 /* SQLITE_BLOB    */ => SQLITE_BLOB,
      5 /* SQLITE_NULL    */ => SQLITE_NULL,
      _ => die!(fmt!("sqlite internal error: Got an unknown column type (%d) back from the library.", ct)),
    };
    return res;
  }

  fn get_column_names(&self) -> ~[~str] {
    let cnt  = self.get_column_count();
    let mut i    = 0;
    let mut r    = ~[];
    while(i < cnt){
      vec::push(&mut r, self.get_column_name(i));
      i += 1;
    }
    return r;
  }

  fn bind_params(&self, values: &[BindArg]) -> ResultCode {
    let mut i = 0i;
    for values.each |v| {
      let r = self.bind_param(i, v);
      if r != SQLITE_OK {
        return r;
      }
      i += 1;
    }
    return SQLITE_OK;
  }

  unsafe fn bind_param(&self, i: int, value: &BindArg) -> ResultCode {
    let mut r = match *value {
      Text(copy v) => {
        let l = str::len(v);
        str::as_c_str(v, |_v| {
          // FIXME: -1 means: SQLITE_TRANSIENT, so this interface will do lots
          //        of copying when binding text or blob values.
          sqlite3::sqlite3_bind_text(self.stmt, i as c_int, _v, l as c_int, -1 as c_int)
        })
      }

      Blob(copy v) => {
        let l = vec::len(v);
        // FIXME: -1 means: SQLITE_TRANSIENT, so this interface will do lots
        //        of copying when binding text or blob values.
        sqlite3::sqlite3_bind_blob(self.stmt, i as c_int, vec::raw::to_ptr(v), l as c_int, -1 as c_int)
      }

      Integer(copy v) => { sqlite3::sqlite3_bind_int(self.stmt, i as c_int, v as c_int) }

      Number(copy v) => { sqlite3::sqlite3_bind_double(self.stmt, i as c_int, v) }

      Null => { sqlite3::sqlite3_bind_null(self.stmt, i as c_int) }

    };

    return r;
  }
}

pub fn open(path: &str) -> SqliteResult<Database> {
  let dbh = ptr::null();
  let r = str::as_c_str(path, |_path| {
    unsafe {
      sqlite3::sqlite3_open(_path, ptr::addr_of(&dbh))
    }
  });
  if r != SQLITE_OK {
    Err(r)
  } else {
    debug!("created new dbh: %?", dbh);
    Ok(Database { dbh: dbh })
  }
}

#[cfg(test)]
mod tests {

  fn checked_prepare(database: Database, sql: &str) -> Cursor {
    match database.prepare(sql, &None) {
      Ok(move s)  => { s }
      Err(x) => { die!(fmt!("sqlite error: \"%s\" (%?)", database.get_errmsg(), x)); }
    }
  }

  fn checked_open() -> Database {
    match open(":memory:") {
      Ok(move database) => database,
      Err(e) => die!(e.to_str()),
    }
  }

  fn checked_exec(database: &Database, sql: &str) {
    let r = database.exec(sql);
    assert r.is_ok();
  }

  #[test]
  fn open_db() {
    checked_open();
  }

  #[test]
  fn exec_create_tbl() {
    let database = checked_open();
    checked_exec(&database, "BEGIN; CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT); COMMIT;");
  }

  #[test]
  fn prepare_insert_stmt() {
    let database = checked_open();

    checked_exec(&database, "BEGIN; CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT); COMMIT;");
    let sth = checked_prepare(database, "INSERT OR IGNORE INTO test (id) VALUES (1)");
    let res = sth.step();
    debug!("prepare_insert_stmt step res: %?", res);
  }

  #[test]
  fn prepare_select_stmt() {
    let database = checked_open();

    checked_exec(&database,
      "BEGIN;
      CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT);
      INSERT OR IGNORE INTO test (id) VALUES (1);
      COMMIT;"
    );

    let sth = checked_prepare(database, "SELECT id FROM test WHERE id = 1;");
    assert sth.step() == SQLITE_ROW;
    assert sth.get_int(0) == 1;
    assert sth.step() == SQLITE_DONE;
  }

  #[test]
  fn prepared_stmt_bind() {
    let database = checked_open();

    checked_exec(&database, "BEGIN; CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT); COMMIT;");

    checked_exec(&database,
      "INSERT OR IGNORE INTO test (id) VALUES(2);
        INSERT OR IGNORE INTO test (id) VALUES(3);
        INSERT OR IGNORE INTO test (id) VALUES(4);"
    );
    let sth = checked_prepare(database, "SELECT id FROM test WHERE id > ? AND id < ?");
    assert sth.bind_param(1, &Integer(2)) == SQLITE_OK;
    assert sth.bind_param(2, &Integer(4)) == SQLITE_OK;

    assert sth.step() == SQLITE_ROW;
    assert sth.get_num(0) as int == 3;
  }

  #[test]
  fn column_names() {
    let database = checked_open();

    checked_exec(&database,
      "BEGIN;
        CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT, v TEXT);
        INSERT OR IGNORE INTO test (id, v) VALUES(1, 'leeeee');
        COMMIT;"
    );
    let sth = checked_prepare(database, "SELECT * FROM test");
    assert sth.step() == SQLITE_ROW;
    assert sth.get_column_names() == ~[~"id", ~"v"];
  }

  #[test]
  #[should_fail]
  fn failed_prepare() {
    let database = checked_open();

    checked_exec(&database,
      "BEGIN;
        CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT, v TEXT);
        INSERT OR IGNORE INTO test (id, v) VALUES(1, 'leeeee');
        COMMIT;"
    );
    let _sth = checked_prepare(database, "SELECT q FRO test");
  }

  #[test]
  fn bind_param_index() {
    let database = checked_open();

    checked_exec(&database,
      "BEGIN;
        CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT, v TEXT);
        INSERT OR IGNORE INTO test (id, v) VALUES(1, 'leeeee');
        COMMIT;"
    );
    let sth = checked_prepare(database, "SELECT * FROM test WHERE v=:Name");
    assert sth.get_bind_index(":Name") == 1;
  }

  #[test]
  fn last_insert_id() {
    let database = checked_open();
    checked_exec(&database,
      "
      BEGIN;
      CREATE TABLE IF NOT EXISTS test (v TEXT);
      INSERT OR IGNORE INTO test (v) VALUES ('This is a really long string.');
      COMMIT;
      "
    );
    debug!("last insert_id: %s", u64::str(database.get_last_insert_rowid() as u64));
    assert database.get_last_insert_rowid() == 1_i64;
  }

  #[test]
  fn step_row_basics() {
    let database = checked_open();
    checked_exec(&database,
      "
      BEGIN;
      CREATE TABLE IF NOT EXISTS test (id INTEGER, k TEXT, v REAL);
      INSERT OR IGNORE INTO test (id, k, v) VALUES(1, 'pi', 3.1415);
      INSERT OR IGNORE INTO test (id, k, v) VALUES(2, 'e', 2.17);
      INSERT OR IGNORE INTO test (id, k, v) VALUES(3, 'o', 1.618);
      COMMIT;
      "
    );
    let sth = checked_prepare(database, "SELECT * FROM test WHERE id=2");
    let r = sth.step_row();
    let possible_row = result::unwrap(r);
    match move possible_row {
      Some(move x) => {
        let mut x = x;
        assert x.pop(&~"id") == Some(Integer(2));
        assert x.pop(&~"k")  == Some(Text(~"e"));
        assert x.pop(&~"v")  == Some(Number(2.17));
      }
      None => {
        die!(~"didnt get even one row back.");
      }
    }
  }

  #[test]
  fn check_complete_sql() {
    let r1 = sqlite_complete("SELECT * FROM");
    let r2 = sqlite_complete("SELECT * FROM bob;");
    assert is_ok_and(r1, false);
    assert is_ok_and(r2, true);

    fn is_ok_and(r: SqliteResult<bool>, v: bool) -> bool {
      assert r.is_ok();
      return r.get() == v;
    }
  }
}

